import type { NextPage, NextPageContext } from "next";
import Link from "next/link";
import Head from "next/head";
import Image from "next/image";
import { useContext, useState, useEffect } from "react";
import styles from "../styles/Home.module.css";
import SessionContext, {
  useSession,
  setSessionId,
} from "../components/session";
import { IncomingMessage, ServerResponse } from "http";

const Home: NextPage<{ sessionInfo: string; test: string }> = ({
  sessionInfo,
  test,
}) => {
  //const sessionContext = useContext(SessionContext);
  const session = useSession();

  setSessionId(sessionInfo);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <button onClick={() => console.log(session)}>testa context</button>
        <button
          onClick={() => {
            setSessionId(test); //"session-atualizada-no-componente");
          }}
        >
          Muda a session
        </button>
        <Link href="/dashboard">
          <a>Navegar para p√°gina do dash</a>
        </Link>
      </main>
    </div>
  );
};

export default Home;

const sessionFromToken = (req: IncomingMessage) => {
  const authCookie = req?.headers?.authorization;

  const sessionData = authCookie; //parse cookie null if doesnt exist or malformed

  return sessionData;
};

const parseAuthCookie = (cookies: string) => {};

const BlockUnAuth = (fn: (context: NextPageContext) => Promise<any>) => {
  return async function (context: NextPageContext) {
    const { req, res }: { req?: IncomingMessage; res?: ServerResponse } =
      context;

    const bearer = req?.headers.cookie
      ?.split("=")
      .find((cookie) => cookie.match(/^Bearer/))
      ?.split(":")[1];

    if (!bearer) {
      res?.writeHead(307, { Location: "/login?from=" });
      res?.end();
    }
    const pageProps = await fn(context);
    return { pageProps, bearer };
  };
};

const injectSession = (fn: (context: NextPageContext) => any) => {
  return async function (context: NextPageContext) {
    //parse session from request
    const session = {
      userId: "parsedSession",
    };
    const pageProps = await fn(context);
    return {
      ...pageProps,
      props: {
        ...pageProps.props,
        session,
      },
    };
  };
};

export const getServerSideProps = injectSession(
  BlockUnAuth(async (context: NextPageContext) => {
    const sessionInfo = "prop-passada-via-ssr";
    //const session = context?.req?.cookies.Authorization; //.get("parsedSession");
    console.log(sessionInfo);
    return { props: { sessionInfo } };
  })
);
